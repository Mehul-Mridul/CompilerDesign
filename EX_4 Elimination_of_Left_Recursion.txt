#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define SIZE 100

int main() {
    char input[SIZE][SIZE];
    char non_terminal;
    char alpha[SIZE][SIZE], beta[SIZE][SIZE];
    int numProductions = 0;

    printf("Enter productions (type 'END' to finish):\n");

    // Input multiple grammar rules
    while (1) {
        printf("Production %d: ", numProductions + 1);
        fgets(input[numProductions], SIZE, stdin);
        input[numProductions][strcspn(input[numProductions], "\n")] = '\0'; // Remove newline

        if (strcmp(input[numProductions], "END") == 0) break;
        numProductions++;
    }

    for (int rule = 0; rule < numProductions; rule++) {
        int alphaCount = 0, betaCount = 0, hasEpsilon = 0;
        non_terminal = input[rule][0];

        // Ensure valid format (A->...)
        char *productions = strchr(input[rule], '>');
        if (!productions || productions[1] == '\0') {
            printf("\nInvalid production format: %s\n", input[rule]);
            continue;
        }
        productions += 1; // Move past '>'

        // Tokenize the right-hand side
        char *token = strtok(productions, "|");
        while (token) {
            if (strcmp(token, "ε") == 0) {
                hasEpsilon = 1;
            } else if (token[0] == non_terminal) {
                strncpy(alpha[alphaCount++], token + 1, SIZE - 1);
            } else {
                strncpy(beta[betaCount++], token, SIZE - 1);
            }
            token = strtok(NULL, "|");
        }

        // Print modified grammar
        if (alphaCount > 0) {
            printf("\nGrammar Without Left Recursion for %c:\n", non_terminal);

            printf(" %c -> ", non_terminal);
            for (int i = 0; i < betaCount; i++) {
                printf("%s%c'%s", beta[i], non_terminal, (i < betaCount - 1) ? " | " : "");
            }
            if (hasEpsilon) printf(" | ε");
            printf("\n");

            printf(" %c' -> ", non_terminal);
            for (int i = 0; i < alphaCount; i++) {
                printf("%s%c'%s", alpha[i], non_terminal, (i < alphaCount - 1) ? " | " : "");
            }
            printf(" | ε\n");
        } else {
            printf("\nNo left recursion detected for %c.\n", non_terminal);
        }
    }

    return 0;
}
